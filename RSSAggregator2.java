import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSAggregator2 {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator2() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */

    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = "";
        if (getChildElement(channel, "description") > 0) {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        } else if (getChildElement(channel, "title") > 0) {
            title = channel.child(getChildElement(channel, "title")).label();
        } else {
            title = "No information";
        }

        String description = "";
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() < 1) {
            description = "No Description.";
        } else {
            description = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println(
                "<h1><a href=\""
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>Title/Description</th>");
        out.println("</tr>");

        int i = 0;
        while (channel.numberOfChildren() > i) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), out);
            }
            i++;
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates {@code out.content}
     * @requires <pre>
     * {@code out.is_open}
     * </pre>
     * @ensures <pre>
     * {@code [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]}
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree t = new XMLTree1(url);
        SimpleWriter outfile = new SimpleWriter1L(file);
        outfile.println("<html>");

        String versionvalue = null;

        boolean b = t.hasAttribute("version");
        if (b) {
            versionvalue = t.attributeValue("version");
        }

        if (t.hasAttribute("title")) {
            outfile.println("<title>" + t.attributeValue("title") + "</title>");
            outfile.println("</head>");
            outfile.println("<body>");
            outfile.println("<h1>" + t.attributeValue("title") + "</h1>");
        } else {
            outfile.println("<title> No title</title>");
            outfile.println("</head>");
            outfile.println("<body>");
            outfile.println("<h1> No title</h1>");
        }
        outfile.println("<ul>");
        for (int i = 0; i < t.numberOfChildren(); i++) {
            if (t.child(i).label().equals("feed")) {
                SimpleWriter rssOut = new SimpleWriter1L(
                        t.child(i).attributeValue("file"));
                XMLTree rssFile = new XMLTree1(
                        t.child(i).attributeValue("url"));

                if (rssFile.label() != "rss" && versionvalue != "2.0") {
                    out.println("Not a proper RSS 2.0 url.");

                } else {

                    outputHeader(rssFile.child(0), rssOut);

                    for (int j = 0; j < rssFile.child(0)
                            .numberOfChildren(); j++) {
                        if (rssFile.child(0).child(j).label().equals("item")) {
                            processItem(rssFile.child(0).child(j), rssOut);
                        }
                    }
                    outputFooter(rssOut);

                    outfile.println("<li><a href= "
                            + t.child(i).attributeValue("file")
                            + " target=\"_blank\">"
                            + t.child(i).attributeValue("name") + "</a></li>");

                    out.println("Check done");
                }

                rssOut.close();
            }

        }

        outfile.println("</ul>");
        outfile.println("</body>");
        outfile.println("</html>");

        outfile.close();

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = xml.numberOfChildren();
        int index = -1;

        while (index < 0 && i > 0) {
            i--;
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        String dateOfPub = "";
        if (item.child(getChildElement(item, "pubDate"))
                .numberOfChildren() > 0) {
            dateOfPub = item.child(getChildElement(item, "pubDate")).child(0)
                    .label();
            out.print("<td>" + dateOfPub + "</td>");

        } else {
            dateOfPub = "The date is not available...";
            out.print("<td>" + dateOfPub + "</td>");

        }

        String source = "No Source Available.";
        String sourceURL = "";
        int i = getChildElement(item, "source"), y = -1;

        if (i != -1 && item.child(i).numberOfChildren() > 0) {

            source = item.child(i).child(0).label();
            sourceURL = item.child(i).attributeValue("url");
            out.println(
                    "<td><a href=\"" + sourceURL + "\">" + source + "</td>");

        } else {

            source = "No Source Available.";
            out.print("<td>" + source + "</td>");

        }

        String news = "No available title or description";
        if (getChildElement(item, "title") != -1 && item
                .child(getChildElement(item, "title")).numberOfChildren() > 0) {
            news = item.child(getChildElement(item, "title")).child(0).label();
            String link = "";
            if (getChildElement(item, "link") != -1
                    && item.child(getChildElement(item, "link"))
                            .numberOfChildren() > 0) {
                link = item.child(getChildElement(item, "link")).child(0)
                        .label();
                out.println("<td><a href=\"" + link + "\">" + news + "</td>");

            } else {
                out.println("<td>" + news + "</td>");
            }

        } else if (getChildElement(item, "description") != -1
                && item.child(getChildElement(item, "description"))
                        .numberOfChildren() > 0) {
            news = item.child(getChildElement(item, "description")).child(0)
                    .label();
            String link = "";
            if (getChildElement(item, "link") != -1
                    && item.child(getChildElement(item, "link"))
                            .numberOfChildren() > 0) {
                link = item.child(getChildElement(item, "link")).child(0)
                        .label();
                out.println("<td><a href=\"" + link + "\">" + news + "</td>");

            } else {
                out.println("<td>" + news + "</td>");

            }

        } else {
            String link = "";
            if (getChildElement(item, "link") != -1
                    && item.child(getChildElement(item, "link"))
                            .numberOfChildren() > 0) {
                link = item.child(getChildElement(item, "link")).child(0)
                        .label();
                out.println("<td><a href=\"" + link + "\">" + news + "</td>");

            } else {
                out.println("<td>" + news + "</td>");
            }

        }

        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */

    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter a XML file with a URL: ");
        String userXML = in.nextLine();

        out.print("Provide the output file name: ");
        String userOutFile = in.nextLine();
        processFeed(userXML, userOutFile, out);

        in.close();
        out.close();
    }

}